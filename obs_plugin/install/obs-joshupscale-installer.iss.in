; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "JoshUpscale PS2"
#define MyAppVersion "@PROJECT_VERSION@"
#define MyAppPublisher "viktprog@gmail.com"

[Setup]
AppId={{A230374E-2DE2-41E5-B4A2-CD7E5254826C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName}
AppPublisher={#MyAppPublisher}
DefaultDirName={code:GetDefaultInstallDir}
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile=@LICENSE_PATH@
PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputBaseFilename=obs-joshupscale-installer
Compression=lzma2/max
SolidCompression=yes
WizardStyle=modern
DirExistsWarning=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "@PLUGIN_PATH@"; DestDir: "{code:GetBinaryPath}"; Flags: ignoreversion
Source: "@CORE_PATH@"; DestDir: "{code:GetDataPath}"; Flags: ignoreversion
Source: "@DATA_PATH@\*"; DestDir: "{code:GetDataPath}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Code]
const
  UseNvVfx = @USE_NVVFX@;
  RequiredObsDlls = '@REQUIRED_DLLS@';
  MinObsVersion = @MIN_OBS_VERSION@;

function GetNvVfxPath: String;
begin
  Result := GetEnv('NV_VIDEO_EFFECTS_PATH');
  if Result = '' then
    Result := ExpandConstant('{commonpf64}\NVIDIA Corporation\NVIDIA Video Effects');
end;

function IsNvVfxInstalled: Boolean;
var
  NvVfxPath: String;
begin
  Result := False;
  NvVfxPath := GetNvVfxPath;
  if not DirExists(NvVfxPath) then
    Exit;
  if not FileExists(NvVfxPath + '\nvinfer.dll') then
    Exit;
  Result := True;
end;

function GetOBSPath: String;
var InstallPath: String;
begin
  if RegQueryStringValue(HKLM, 'SOFTWARE\OBS Studio', '', InstallPath) then
    Result := InstallPath
  else
    Result := ExpandConstant('{commonpf64}\obs-studio')
end;

function GetDefaultInstallDir(Value: String): String;
begin
  if IsAdminInstallMode then
    Result := GetOBSPath
  else
    Result := ExpandConstant('{usercf}\obs-studio\plugins\obs-joshupscale-ps2')
end;

function GetBinaryPath(Value: String): String;
begin
  if IsAdminInstallMode then
    Result := ExpandConstant('{app}\obs-plugins\64bit')
  else
    Result := ExpandConstant('{app}\bin')
end;

function GetDataPath(Value: String): String;
begin
  if IsAdminInstallMode then
    Result := ExpandConstant('{app}\data\obs-plugins\obs-joshupscale-ps2')
  else
    Result := ExpandConstant('{app}\data\obs-joshupscale-ps2')
end;

function GetTargetOBSPath: String;
begin
  if IsAdminInstallMode then
    Result := ExpandConstant('{app}')
  else
    Result := GetOBSPath;
end;

function CheckOldInstall: Boolean;
var OBSPath: String;
begin
  OBSPath := GetTargetOBSPath;
  Result := True;
  if FileExists(OBSPath + '\bin\64bit\JoshUpscale.dll') or
    FileExists(OBSPath + '\bin\64bit\nvinfer.dll') or
    FileExists(OBSPath + '\bin\64bit\nvinfer_builder_resource.dll') then
    Exit;
  Result := False;
end;

function SplitStr(s: String; const Delim: String): TArrayOfString;
var p, c: Integer;
begin
  c := 0;
  while Length(s) > 0 do
  begin
    SetArrayLength(Result, c + 1);
    p := Pos(Delim, s);
    if p = 0 then
    begin
      Result[c] := s;
      Break;
    end;
    Result[c] := Copy(s, 1, p - 1);
    s := Copy(s, p + 1, Length(s) - p);
    c := c + 1;
  end;
end;

function CheckRequiredDlls: Boolean;
var
  OBSPath: String;
  DllList: TArrayOfString;
  i: Integer;
  MajorVer, MinorVer, RevVer, BuildVer: Word;
begin
  OBSPath := GetTargetOBSPath;
  if not DirExists(OBSPath) then
  begin
    Result := True;
    Exit;
  end;
  Result := False;
  DllList := SplitStr(RequiredObsDlls, ':');
  for i := 0 to Length(DllList) - 1 do
    if not FileExists(OBSPath + '\bin\64bit\' + DllList[i]) then
      Exit;
  if not GetVersionComponents(OBSPath + '\bin\64bit\obs.dll', MajorVer, MinorVer, RevVer, BuildVer) then
    Exit;
  if MajorVer < MinObsVersion then
    Exit;
  Result := True;
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  if CheckOldInstall then
  begin
    Result := 'Previous installation detected. Remove old files before continuing';
    Exit;
  end;
  if not CheckRequiredDlls then
  begin
    Result := 'OBS version mismatch';
    Exit;
  end;
end;

function InitializeSetup: Boolean;
begin
  Result := False;
  if UseNvVfx and not IsNvVfxInstalled then
  begin
    MsgBox('You must install NVIDIA Video Effects SDK first', mbCriticalError, MB_OK);
    Exit;
  end;
  Result := True;
end;
